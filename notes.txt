More infomation: https://jonmircha.com/git

0. global config 
    git config --global user.name "Tu Nombre"
    git config --global user.email "tu@email.com"
    git config --global core.editor "nombre_del_editor"
    git config --global color.ui true
    git config --global merge.tool "herramienta"

1.- git init
    Initializes a new Git repository in the current directory.

git clone <repository>
    Creates a copy of a remote repository on your local machine.

2.- git add <file>
    Adds a file to the staging area, ready to be committed.

3.- git commit -m "<message>"
    Commits the changes in the staging area with a descriptive message.

4.- git push
    Pushes the committed changes to a remote repository.

5.- git pull
    Fetches and merges the latest changes from a remote repository.

6.- cambiar de rama master
    git branch -m master main 
        Pasa el historial de master a main.

    git push origin main
        crea el origng 

        git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main
        //configuras de manera manual el branch defaul 
        git push orgin --delete master 
            elimina la rama master

7.- local repository status
    git status
        Shows the current status of the repository and any pending changes.

8.- repository log
    git log
        Displays the commit history of the repository.

9.- help
    Pedir ayuda
        git commando -h  --terminal
        git help comando --navegador externo

10.- Ignorar archivos 
    formas de ignorar 
        archivo.txt 
        carpeta 
        /archivo.txt 
        *.log (todos con extencion log)
        !prod.log (todos menos este archivo)
        doc/*.txt (todos los archivos txt dentro de una carpeta)
        doc/**/*.txt (ignorar todos los .txt dentro de las subcarpetas doc)

        https://www.toptal.com/developers/gitignore --generar archivos .gitignore   
                                                      dependiendo la tech

11.- Manejo de ramas 
    git checkout rama --cambiar de ramas 
    git checkout -b rama --crea rama y te posiciona 
    git branch rama --crear rama
    git branch -d rama --eliminar
    git push --set-upstream origin html --setea otra rama 
    git push -u origin html

12.- merge 
    situarse en la rama a quedar 
    git merge rama1 --merge or join 
    git merge rama2
    git push origin main --push at repository
    
    git branch -d rama1 --delete
    git push origin --delete rama1 --delete in repository
    git branch --no-merged --ramas no fucionadas 
